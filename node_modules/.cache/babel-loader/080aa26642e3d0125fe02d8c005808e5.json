{"ast":null,"code":"import { asyncThunkCreator, createSlice } from \"@reduxjs/toolkit\";\nimport { mainActions } from \"./main-slice\";\nconst initialState = {\n  items: [],\n  itemsQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.itemsQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          title: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.price * existingItem.quantity;\n      }\n    },\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.itemsQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n    // updateCart(state, action) {\n    //   state.items = action.payload.items;\n    //   state.itemsQuantity = action.payload.itemsQuantity;\n    // },\n  }\n});\n\nexport const sendCartData = cartData => {\n  return async dispatchAction => {\n    dispatchAction(mainActions.showStatusMessage({\n      status: \"pending\",\n      title: \"Sending Data\",\n      message: \"Cart Data Sending to Server...\"\n    }));\n    const sendHttpRequest = async () => {\n      const response = await fetch(\"https://react-learn-e675d-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cartData)\n      });\n      if (!response.ok) {\n        throw new Error(\"Sending Data Error\");\n      }\n    };\n    try {\n      await sendHttpRequest();\n      dispatchAction(mainActions.showStatusMessage({\n        status: \"success\",\n        title: \"Data Sent\",\n        message: \"Cart Data Is Successfully sent to Server...\"\n      }));\n    } catch (error) {\n      dispatchAction(mainActions.showStatusMessage({\n        status: \"error\",\n        title: \"Data Error\",\n        message: \"Error occured while sending data\"\n      }));\n    }\n  };\n};\nexport default cartSlice;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"names":["asyncThunkCreator","createSlice","mainActions","initialState","items","itemsQuantity","cartSlice","name","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItem","filter","sendCartData","cartData","dispatchAction","showStatusMessage","status","message","sendHttpRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["E:/JS projects/redux-advanced/src/store/cart-slice.js"],"sourcesContent":["import { asyncThunkCreator, createSlice } from \"@reduxjs/toolkit\";\r\nimport { mainActions } from \"./main-slice\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  itemsQuantity: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItem(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.itemsQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          title: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.price * existingItem.quantity;\r\n      }\r\n    },\r\n    removeItem(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.itemsQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n\r\n    // updateCart(state, action) {\r\n    //   state.items = action.payload.items;\r\n    //   state.itemsQuantity = action.payload.itemsQuantity;\r\n    // },\r\n  },\r\n});\r\n\r\nexport const sendCartData = (cartData) => {\r\n  return async (dispatchAction) => {\r\n    dispatchAction(\r\n      mainActions.showStatusMessage({\r\n        status: \"pending\",\r\n        title: \"Sending Data\",\r\n        message: \"Cart Data Sending to Server...\",\r\n      })\r\n    );\r\n\r\n    const sendHttpRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://react-learn-e675d-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(cartData),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending Data Error\");\r\n      }\r\n    };\r\n    try {\r\n      await sendHttpRequest();\r\n      dispatchAction(\r\n        mainActions.showStatusMessage({\r\n          status: \"success\",\r\n          title: \"Data Sent\",\r\n          message: \"Cart Data Is Successfully sent to Server...\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatchAction(\r\n        mainActions.showStatusMessage({\r\n          status: \"error\",\r\n          title: \"Data Error\",\r\n          message: \"Error occured while sending data\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default cartSlice;\r\nexport const cartActions = cartSlice.actions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}